import os
import re
import subprocess
import requests
import time
from dotenv import load_dotenv
from validator import validate_scene

load_dotenv()

MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
SCRIPT_FILENAME = "generated_scene.py"
RENDER_FILENAME = "render.png"
MAX_ATTEMPTS = 6

PROMPT_STRUCTURE = (
    "Cr√©e une sc√®ne Blender compatible Blender 4.4 avec :\n"
    "- Un sol\n"
    "- Trois arbres compos√©s d‚Äôun tronc (cylindre ou c√¥ne) et de feuillage (sph√®re ou c√¥ne)\n"
    "- Une rivi√®re au centre\n"
    "- Une lumi√®re naturelle\n"
    "- Une cam√©ra bien plac√©e pour voir toute la sc√®ne\n\n"
    "Le script Python doit :\n"
    "- √ätre directement ex√©cutable dans Blender\n"
    "- Utiliser le moteur de rendu 'BLENDER_EEVEE_NEXT'\n"
    "- Aucune couleur ni mat√©riau n‚Äôest n√©cessaire √† ce stade\n"
    "- Ne jamais inclure de backticks Markdown ni commentaires"
)

PROMPT_COLORIZE = (
    "Am√©liore ce script Blender en ajoutant des couleurs et mat√©riaux compatibles Blender 4.4. Utilise :\n\n"
    "- Sol vert clair (RGBA 0.1, 0.7, 0.1, 1)\n"
    "- Troncs marron fonc√© (RGBA 0.2, 0.1, 0.0, 1)\n"
    "- Feuillage vert (RGBA 0.0, 0.5, 0.0, 1)\n"
    "- Rivi√®re bleue translucide (RGBA 0.0, 0.3, 0.7, 0.8)\n\n"
    "Le script modifi√© doit :\n"
    "- Cr√©er les mat√©riaux avec 'Principled BSDF' de mani√®re robuste\n"
    "- Affecter les mat√©riaux √† chaque objet correspondant\n"
    "- Utiliser 'BLENDER_EEVEE_NEXT'\n"
    "- G√©n√©rer un fichier 'render.png' dans le m√™me dossier\n"
    "- Ne jamais inclure de backticks Markdown ni commentaires"
)


def prompt_to_blender_code(prompt: str) -> str:
    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "mistral-medium",
        "messages": [
            {"role": "system", "content": "Tu es un expert Blender Python. G√©n√®re un script compatible Blender 4.4."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.4,
    }
    while True:
        response = requests.post(url, headers=headers, json=data)
        if response.status_code == 429:
            print("‚ö†Ô∏è Limite API atteinte, attente 30 secondes...")
            time.sleep(30)
            continue
        elif response.status_code != 200:
            raise RuntimeError(f"Erreur API : {response.status_code} - {response.text}")
        break
    return clean_code(response.json()["choices"][0]["message"]["content"])

def clean_code(code: str) -> str:
    lines = code.strip().splitlines()

    # On extrait uniquement les lignes de code √† partir de "import bpy"
    code_start = next((i for i, line in enumerate(lines) if "import bpy" in line), 0)
    code_lines = lines[code_start:]

    # On coupe tout apr√®s le "main()" final pour √©viter les descriptions parasites
    for i, line in enumerate(code_lines):
        if 'main()' in line and '__name__' in code_lines[i - 1]:
            return "\n".join(code_lines[:i + 1])

    return "\n".join(code_lines)

def save_script(script: str, filename: str):
    with open(filename, "w", encoding="utf-8") as f:
        f.write(script)

def run_blender_script(script_path: str):
    blender_exec = "blender"
    subprocess.run([blender_exec, "--background", "--python", script_path], check=True)

if __name__ == "__main__":
    attempt = 0
    while attempt < MAX_ATTEMPTS:
        print(f"\nüéØ √âtape 1 : G√©n√©ration structure ({attempt + 1})...")
        try:
            base_code = prompt_to_blender_code(PROMPT_STRUCTURE)
            save_script(base_code, SCRIPT_FILENAME)
            run_blender_script(SCRIPT_FILENAME)

            print("\nüéØ √âtape 2 : Application des mat√©riaux...")
            enhanced_prompt = f"{PROMPT_COLORIZE}\n\nVoici le code de base :\n{base_code}"
            colored_code = prompt_to_blender_code(enhanced_prompt)
            save_script(colored_code, SCRIPT_FILENAME)
            run_blender_script(SCRIPT_FILENAME)

            if validate_scene(RENDER_FILENAME):
                print("‚úÖ Sc√®ne valid√©e !")
                break
        except Exception as e:
            print(f"‚ùå Erreur : {e}")
        print("üîÅ Nouvelle tentative...")
        attempt += 1
